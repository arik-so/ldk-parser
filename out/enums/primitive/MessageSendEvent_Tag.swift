
			#if SWIFT_PACKAGE
			import LDKHeaders
			#endif

			/// An event generated by ChannelManager which indicates a message should be sent to a peer (or
			/// broadcast to most peers).
			/// These events are handled by PeerManager::process_events if you are using a PeerManager.
			public typealias MessageSendEvent_Tag = Bindings.MessageSendEvent_Tag

			extension Bindings {

				/// An event generated by ChannelManager which indicates a message should be sent to a peer (or
				/// broadcast to most peers).
				/// These events are handled by PeerManager::process_events if you are using a PeerManager.
				public enum MessageSendEvent_Tag {

					
					/// Used to indicate that we've accepted a channel open and should send the accept_channel
					/// message provided to the given peer.
					case LDKMessageSendEvent_SendAcceptChannel
			
					/// Used to indicate that we've initiated a channel open and should send the open_channel
					/// message provided to the given peer.
					case LDKMessageSendEvent_SendOpenChannel
			
					/// Used to indicate that a funding_created message should be sent to the peer with the given node_id.
					case LDKMessageSendEvent_SendFundingCreated
			
					/// Used to indicate that a funding_signed message should be sent to the peer with the given node_id.
					case LDKMessageSendEvent_SendFundingSigned
			
					/// Used to indicate that a channel_ready message should be sent to the peer with the given node_id.
					case LDKMessageSendEvent_SendChannelReady
			
					/// Used to indicate that an announcement_signatures message should be sent to the peer with the given node_id.
					case LDKMessageSendEvent_SendAnnouncementSignatures
			
					/// Used to indicate that a series of HTLC update messages, as well as a commitment_signed
					/// message should be sent to the peer with the given node_id.
					case LDKMessageSendEvent_UpdateHTLCs
			
					/// Used to indicate that a revoke_and_ack message should be sent to the peer with the given node_id.
					case LDKMessageSendEvent_SendRevokeAndACK
			
					/// Used to indicate that a closing_signed message should be sent to the peer with the given node_id.
					case LDKMessageSendEvent_SendClosingSigned
			
					/// Used to indicate that a shutdown message should be sent to the peer with the given node_id.
					case LDKMessageSendEvent_SendShutdown
			
					/// Used to indicate that a channel_reestablish message should be sent to the peer with the given node_id.
					case LDKMessageSendEvent_SendChannelReestablish
			
					/// Used to send a channel_announcement and channel_update to a specific peer, likely on
					/// initial connection to ensure our peers know about our channels.
					case LDKMessageSendEvent_SendChannelAnnouncement
			
					/// Used to indicate that a channel_announcement and channel_update should be broadcast to all
					/// peers (except the peer with node_id either msg.contents.node_id_1 or msg.contents.node_id_2).
					/// 
					/// Note that after doing so, you very likely (unless you did so very recently) want to
					/// broadcast a node_announcement (e.g. via [`PeerManager::broadcast_node_announcement`]). This
					/// ensures that any nodes which see our channel_announcement also have a relevant
					/// node_announcement, including relevant feature flags which may be important for routing
					/// through or to us.
					/// 
					/// [`PeerManager::broadcast_node_announcement`]: crate::ln::peer_handler::PeerManager::broadcast_node_announcement
					case LDKMessageSendEvent_BroadcastChannelAnnouncement
			
					/// Used to indicate that a channel_update should be broadcast to all peers.
					case LDKMessageSendEvent_BroadcastChannelUpdate
			
					/// Used to indicate that a channel_update should be sent to a single peer.
					/// In contrast to [`Self::BroadcastChannelUpdate`], this is used when the channel is a
					/// private channel and we shouldn't be informing all of our peers of channel parameters.
					case LDKMessageSendEvent_SendChannelUpdate
			
					/// Broadcast an error downstream to be handled
					case LDKMessageSendEvent_HandleError
			
					/// Query a peer for channels with funding transaction UTXOs in a block range.
					case LDKMessageSendEvent_SendChannelRangeQuery
			
					/// Request routing gossip messages from a peer for a list of channels identified by
					/// their short_channel_ids.
					case LDKMessageSendEvent_SendShortIdsQuery
			
					/// Sends a reply to a channel range query. This may be one of several SendReplyChannelRange events
					/// emitted during processing of the query.
					case LDKMessageSendEvent_SendReplyChannelRange
			
					/// Sends a timestamp filter for inbound gossip. This should be sent on each new connection to
					/// enable receiving gossip messages from the peer.
					case LDKMessageSendEvent_SendGossipTimestampFilter
			

					internal init (value: LDKMessageSendEvent_Tag) {

						// TODO: remove this initial assumption somehow
						self = .LDKMessageSendEvent_SendGossipTimestampFilter

						
						// LDKMessageSendEvent_SendAcceptChannel
						if value.rawValue == 0 {
							self = .LDKMessageSendEvent_SendAcceptChannel
						}
			
						// LDKMessageSendEvent_SendOpenChannel
						if value.rawValue == 1 {
							self = .LDKMessageSendEvent_SendOpenChannel
						}
			
						// LDKMessageSendEvent_SendFundingCreated
						if value.rawValue == 2 {
							self = .LDKMessageSendEvent_SendFundingCreated
						}
			
						// LDKMessageSendEvent_SendFundingSigned
						if value.rawValue == 3 {
							self = .LDKMessageSendEvent_SendFundingSigned
						}
			
						// LDKMessageSendEvent_SendChannelReady
						if value.rawValue == 4 {
							self = .LDKMessageSendEvent_SendChannelReady
						}
			
						// LDKMessageSendEvent_SendAnnouncementSignatures
						if value.rawValue == 5 {
							self = .LDKMessageSendEvent_SendAnnouncementSignatures
						}
			
						// LDKMessageSendEvent_UpdateHTLCs
						if value.rawValue == 6 {
							self = .LDKMessageSendEvent_UpdateHTLCs
						}
			
						// LDKMessageSendEvent_SendRevokeAndACK
						if value.rawValue == 7 {
							self = .LDKMessageSendEvent_SendRevokeAndACK
						}
			
						// LDKMessageSendEvent_SendClosingSigned
						if value.rawValue == 8 {
							self = .LDKMessageSendEvent_SendClosingSigned
						}
			
						// LDKMessageSendEvent_SendShutdown
						if value.rawValue == 9 {
							self = .LDKMessageSendEvent_SendShutdown
						}
			
						// LDKMessageSendEvent_SendChannelReestablish
						if value.rawValue == 10 {
							self = .LDKMessageSendEvent_SendChannelReestablish
						}
			
						// LDKMessageSendEvent_SendChannelAnnouncement
						if value.rawValue == 11 {
							self = .LDKMessageSendEvent_SendChannelAnnouncement
						}
			
						// LDKMessageSendEvent_BroadcastChannelAnnouncement
						if value.rawValue == 12 {
							self = .LDKMessageSendEvent_BroadcastChannelAnnouncement
						}
			
						// LDKMessageSendEvent_BroadcastChannelUpdate
						if value.rawValue == 13 {
							self = .LDKMessageSendEvent_BroadcastChannelUpdate
						}
			
						// LDKMessageSendEvent_SendChannelUpdate
						if value.rawValue == 14 {
							self = .LDKMessageSendEvent_SendChannelUpdate
						}
			
						// LDKMessageSendEvent_HandleError
						if value.rawValue == 15 {
							self = .LDKMessageSendEvent_HandleError
						}
			
						// LDKMessageSendEvent_SendChannelRangeQuery
						if value.rawValue == 16 {
							self = .LDKMessageSendEvent_SendChannelRangeQuery
						}
			
						// LDKMessageSendEvent_SendShortIdsQuery
						if value.rawValue == 17 {
							self = .LDKMessageSendEvent_SendShortIdsQuery
						}
			
						// LDKMessageSendEvent_SendReplyChannelRange
						if value.rawValue == 18 {
							self = .LDKMessageSendEvent_SendReplyChannelRange
						}
			
						// LDKMessageSendEvent_SendGossipTimestampFilter
						if value.rawValue == 19 {
							self = .LDKMessageSendEvent_SendGossipTimestampFilter
						}
			
					}

					internal func getCValue() -> LDKMessageSendEvent_Tag {
						switch self {
							
							case .LDKMessageSendEvent_SendAcceptChannel:
								// return LDKMessageSendEvent_SendAcceptChannel
								return LDKMessageSendEvent_Tag(0)
			
							case .LDKMessageSendEvent_SendOpenChannel:
								// return LDKMessageSendEvent_SendOpenChannel
								return LDKMessageSendEvent_Tag(1)
			
							case .LDKMessageSendEvent_SendFundingCreated:
								// return LDKMessageSendEvent_SendFundingCreated
								return LDKMessageSendEvent_Tag(2)
			
							case .LDKMessageSendEvent_SendFundingSigned:
								// return LDKMessageSendEvent_SendFundingSigned
								return LDKMessageSendEvent_Tag(3)
			
							case .LDKMessageSendEvent_SendChannelReady:
								// return LDKMessageSendEvent_SendChannelReady
								return LDKMessageSendEvent_Tag(4)
			
							case .LDKMessageSendEvent_SendAnnouncementSignatures:
								// return LDKMessageSendEvent_SendAnnouncementSignatures
								return LDKMessageSendEvent_Tag(5)
			
							case .LDKMessageSendEvent_UpdateHTLCs:
								// return LDKMessageSendEvent_UpdateHTLCs
								return LDKMessageSendEvent_Tag(6)
			
							case .LDKMessageSendEvent_SendRevokeAndACK:
								// return LDKMessageSendEvent_SendRevokeAndACK
								return LDKMessageSendEvent_Tag(7)
			
							case .LDKMessageSendEvent_SendClosingSigned:
								// return LDKMessageSendEvent_SendClosingSigned
								return LDKMessageSendEvent_Tag(8)
			
							case .LDKMessageSendEvent_SendShutdown:
								// return LDKMessageSendEvent_SendShutdown
								return LDKMessageSendEvent_Tag(9)
			
							case .LDKMessageSendEvent_SendChannelReestablish:
								// return LDKMessageSendEvent_SendChannelReestablish
								return LDKMessageSendEvent_Tag(10)
			
							case .LDKMessageSendEvent_SendChannelAnnouncement:
								// return LDKMessageSendEvent_SendChannelAnnouncement
								return LDKMessageSendEvent_Tag(11)
			
							case .LDKMessageSendEvent_BroadcastChannelAnnouncement:
								// return LDKMessageSendEvent_BroadcastChannelAnnouncement
								return LDKMessageSendEvent_Tag(12)
			
							case .LDKMessageSendEvent_BroadcastChannelUpdate:
								// return LDKMessageSendEvent_BroadcastChannelUpdate
								return LDKMessageSendEvent_Tag(13)
			
							case .LDKMessageSendEvent_SendChannelUpdate:
								// return LDKMessageSendEvent_SendChannelUpdate
								return LDKMessageSendEvent_Tag(14)
			
							case .LDKMessageSendEvent_HandleError:
								// return LDKMessageSendEvent_HandleError
								return LDKMessageSendEvent_Tag(15)
			
							case .LDKMessageSendEvent_SendChannelRangeQuery:
								// return LDKMessageSendEvent_SendChannelRangeQuery
								return LDKMessageSendEvent_Tag(16)
			
							case .LDKMessageSendEvent_SendShortIdsQuery:
								// return LDKMessageSendEvent_SendShortIdsQuery
								return LDKMessageSendEvent_Tag(17)
			
							case .LDKMessageSendEvent_SendReplyChannelRange:
								// return LDKMessageSendEvent_SendReplyChannelRange
								return LDKMessageSendEvent_Tag(18)
			
							case .LDKMessageSendEvent_SendGossipTimestampFilter:
								// return LDKMessageSendEvent_SendGossipTimestampFilter
								return LDKMessageSendEvent_Tag(19)
			
						}
					}

				}

			}
		