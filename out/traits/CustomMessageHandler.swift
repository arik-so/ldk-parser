
			#if SWIFT_PACKAGE
			import LDKHeaders
			#endif

			public typealias CustomMessageHandler = Bindings.CustomMessageHandler

			extension Bindings {

				/// Handler for BOLT1-compliant messages.
				open class CustomMessageHandler: NativeTraitWrapper {

					
					private static var instanceCounter: UInt = 0
					internal let instanceNumber: UInt

					internal var cType: LDKCustomMessageHandler?

					public init(cType: LDKCustomMessageHandler) {
						Self.instanceCounter += 1
						self.instanceNumber = Self.instanceCounter
						self.cType = cType
						super.init(conflictAvoidingVariableName: 0)
					}

					public init(cType: LDKCustomMessageHandler, anchor: NativeTypeWrapper) {
						Self.instanceCounter += 1
						self.instanceNumber = Self.instanceCounter
						self.cType = cType
						super.init(conflictAvoidingVariableName: 0)
						self.dangling = true
						try! self.addAnchor(anchor: anchor)
					}
		

					public init(CustomMessageReader: CustomMessageReader) {
						Self.instanceCounter += 1
						self.instanceNumber = Self.instanceCounter
						super.init(conflictAvoidingVariableName: 0)

						let thisArg = Bindings.instanceToPointer(instance: self)

						

						
						func handleCustomMessageLambda(this_arg: UnsafeRawPointer?, msg: LDKType, sender_node_id: LDKPublicKey) -> LDKCResult_NoneLightningErrorZ {
							let instance: CustomMessageHandler = Bindings.pointerToInstance(pointer: this_arg!, sourceMarker: "CustomMessageHandler::handleCustomMessageLambda")

							// Swift callback variable prep
											

							// Swift callback call
							let swiftCallbackResult = instance.handleCustomMessage(msg: NativelyImplementedBindingsType(cType: msg), senderNodeId: PublicKey(cType: sender_node_id).getValue())

							// cleanup
							

							// return value (do some wrapping)
							let returnValue = swiftCallbackResult.cType!

							return returnValue
						}
		
						func getAndClearPendingMsgLambda(this_arg: UnsafeRawPointer?) -> LDKCVec_C2Tuple_PublicKeyTypeZZ {
							let instance: CustomMessageHandler = Bindings.pointerToInstance(pointer: this_arg!, sourceMarker: "CustomMessageHandler::getAndClearPendingMsgLambda")

							// Swift callback variable prep
											

							// Swift callback call
							let swiftCallbackResult = instance.getAndClearPendingMsg()

							// cleanup
							

							// return value (do some wrapping)
							let returnValue = Vec_C2Tuple_PublicKeyTypeZZ(array: swiftCallbackResult).dangle().cType!

							return returnValue
						}
		
						func freeLambda(this_arg: UnsafeMutableRawPointer?) -> Void {
							let instance: CustomMessageHandler = Bindings.pointerToInstance(pointer: this_arg!, sourceMarker: "CustomMessageHandler::freeLambda")

							// Swift callback variable prep
											

							// Swift callback call
							let swiftCallbackResult = instance.free()

							// cleanup
							

							// return value (do some wrapping)
							let returnValue = swiftCallbackResult

							return returnValue
						}
		

						self.cType = LDKCustomMessageHandler(							
							this_arg: thisArg,
							handle_custom_message: handleCustomMessageLambda,
							get_and_clear_pending_msg: getAndClearPendingMsgLambda,
							CustomMessageReader: CustomMessageReader.activate().cType!,
							free: freeLambda
						)
					}

					
					/// Called with the message type that was received and the buffer to be read.
					/// Can return a `MessageHandlingError` if the message could not be handled.
					open func handleCustomMessage(msg: BindingsType, senderNodeId: [UInt8]) -> Result_NoneLightningErrorZ {
						Bindings.print("Error: CustomMessageHandler::handleCustomMessage MUST be overridden! Offending class: (String(describing: self)). Aborting.", severity: .ERROR)
						abort()
					}
		
					/// Gets the list of pending messages which were generated by the custom message
					/// handler, clearing the list in the process. The first tuple element must
					/// correspond to the intended recipients node ids. If no connection to one of the
					/// specified node does not exist, the message is simply not sent to it.
					open func getAndClearPendingMsg() -> [([UInt8], BindingsType)] {
						Bindings.print("Error: CustomMessageHandler::getAndClearPendingMsg MUST be overridden! Offending class: (String(describing: self)). Aborting.", severity: .ERROR)
						abort()
					}
		
					/// Frees any resources associated with this object given its this_arg pointer.
					/// Does not need to free the outer struct containing function pointers and may be NULL is no resources need to be freed.
					open func free() -> Void {
						Bindings.print("Error: CustomMessageHandler::free MUST be overridden! Offending class: (String(describing: self)). Aborting.", severity: .ERROR)
						abort()
					}
		

					

					
					/// Implementation of CustomMessageReader for this object.
					public func getCustomMessageReader() -> CustomMessageReader {
						// return value (do some wrapping)
						let returnValue = NativelyImplementedCustomMessageReader(cType: self.cType!.CustomMessageReader, anchor: self)

						return returnValue;
					}
		

					internal func dangle() -> CustomMessageHandler {
        				self.dangling = true
						return self
					}

					deinit {
						if !self.dangling {
							Bindings.print("Freeing CustomMessageHandler \(self.instanceNumber).")
							self.free()
						} else {
							Bindings.print("Not freeing CustomMessageHandler \(self.instanceNumber) due to dangle.")
						}
					}
				}

				public class NativelyImplementedCustomMessageHandler: CustomMessageHandler {
					
					/// Called with the message type that was received and the buffer to be read.
					/// Can return a `MessageHandlingError` if the message could not be handled.
					public override func handleCustomMessage(msg: BindingsType, senderNodeId: [UInt8]) -> Result_NoneLightningErrorZ {
						// native call variable prep
						
						let senderNodeIdPrimitiveWrapper = PublicKey(value: senderNodeId)
				

						// native method call
						let nativeCallResult = self.cType!.handle_custom_message(self.cType!.this_arg, msg.activate().cType!, senderNodeIdPrimitiveWrapper.cType!)

						// cleanup
						

						// return value (do some wrapping)
						let returnValue = Result_NoneLightningErrorZ(cType: nativeCallResult)

						return returnValue
					}
		
					/// Gets the list of pending messages which were generated by the custom message
					/// handler, clearing the list in the process. The first tuple element must
					/// correspond to the intended recipients node ids. If no connection to one of the
					/// specified node does not exist, the message is simply not sent to it.
					public override func getAndClearPendingMsg() -> [([UInt8], BindingsType)] {
						// native call variable prep
						

						// native method call
						let nativeCallResult = self.cType!.get_and_clear_pending_msg(self.cType!.this_arg)

						// cleanup
						

						// return value (do some wrapping)
						let returnValue = Vec_C2Tuple_PublicKeyTypeZZ(cType: nativeCallResult).getValue()

						return returnValue
					}
		
					/// Frees any resources associated with this object given its this_arg pointer.
					/// Does not need to free the outer struct containing function pointers and may be NULL is no resources need to be freed.
					public override func free() {
						// native call variable prep
						

						// native method call
						let nativeCallResult = self.cType!.free(self.cType!.this_arg)

						// cleanup
						

						// return value (do some wrapping)
						let returnValue = nativeCallResult

						return returnValue
					}
		
				}

			}
		